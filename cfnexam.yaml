Parameters:

  vpcCIDR:
    Type: String
    Default: "XXX.XXX.0.0/16"
    Description: "Enter Your VPC CIDR"
  
  subnet1CIDR:
    Type: String
    Default: "XXX.XXX.1.0/24"
    Description: "Enter Your Subnet1 CIDR"
  
  subnet2CIDR:
    Type: String
    Default: "XXX.XXX.2.0/24"
    Description: "Enter Your Subnet2 CIDR"

  subnet3CIDR:
    Type: String
    Default: "XXX.XXX.3.0/24"
    Description: "Enter Your Subnet3 CIDR"

  subnet4CIDR:
    Type: String
    Default: "XXX.XXX.4.0/24"
    Description: "Enter Your Subnet4 CIDR"

  az1:
    Type: String
    Description: "Enter Your AZ-1 ID"

  az2:
    Type: String
    Description: "Enter Your AZ-2 ID"

  amiID:
    Type: String
    Default: 'ami-0d94353f7bad10668'
    Description: "Enter Your EC2 AMI ID"
  
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
      - t3.micro
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.


Resources:

  MetroDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: metroddb
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  customVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: stack
          Value: production

  customInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: stack
        Value: production
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref customVPC
      InternetGatewayId:
        Ref: customInternetGateway

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: customVPC
      Tags:
      - Key: stack
        Value: production
  
  publicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: customInternetGateway
  
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !Ref subnet1CIDR
      AvailabilityZone: !Ref az1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: stack
        Value: production

  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !Ref subnet2CIDR
      AvailabilityZone: !Ref az2
      MapPublicIpOnLaunch: true
      Tags:
      - Key: stack
        Value: production

  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !Ref subnet3CIDR
      AvailabilityZone: !Ref az1
      Tags:
      - Key: stack
        Value: production

  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !Ref subnet4CIDR
      AvailabilityZone: !Ref az2
      Tags:
      - Key: stack
        Value: production
  
  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: publicSubnet1
      RouteTableId:
        Ref: publicRouteTable

  publicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: publicSubnet2
      RouteTableId:
        Ref: publicRouteTable

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref customVPC

  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref publicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref customVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway

  
  privateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  privateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: privateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref customVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  publicEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref amiID
      InstanceType: !Ref InstanceTypeParameter
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref publicSubnet1

  privateEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref amiID
      InstanceType: !Ref InstanceTypeParameter
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref privateSubnet1
